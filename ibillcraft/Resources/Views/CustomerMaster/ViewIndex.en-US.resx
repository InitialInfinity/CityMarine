<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Alternate Contact" xml:space="preserve">
    <value>Alternate Contact</value>
  </data>
  <data name="Availabe Balance" xml:space="preserve">
    <value>Availabe Balance</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Credit" xml:space="preserve">
    <value>Credit</value>
  </data>
  <data name="Credit Details" xml:space="preserve">
    <value>Credit Details</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Enter Alternative Contact No" xml:space="preserve">
    <value>Enter Alternative Contact No</value>
  </data>
  <data name="Enter Contact No" xml:space="preserve">
    <value>Enter Contact No</value>
  </data>
  <data name="Enter Customer Address" xml:space="preserve">
    <value>Enter Customer Address</value>
  </data>
  <data name="Enter Customer Email" xml:space="preserve">
    <value>Enter Customer Email</value>
  </data>
  <data name="Enter Customer Name" xml:space="preserve">
    <value>Enter Customer Name</value>
  </data>
  <data name="Enter GST no" xml:space="preserve">
    <value>Enter GST no</value>
  </data>
  <data name="Enter Opening Balance" xml:space="preserve">
    <value>Enter Opening Balance</value>
  </data>
  <data name="Enter Total Credit Limit" xml:space="preserve">
    <value>Enter Total Credit Limit</value>
  </data>
  <data name="Estimate" xml:space="preserve">
    <value>Estimate</value>
  </data>
  <data name="Estimate Report" xml:space="preserve">
    <value>Estimate Report</value>
  </data>
  <data name="GST no" xml:space="preserve">
    <value>GST no</value>
  </data>
  <data name="Is Active" xml:space="preserve">
    <value>Is Active</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Opening Balance" xml:space="preserve">
    <value>Opening Balance</value>
  </data>
  <data name="Outstanding Amount" xml:space="preserve">
    <value>Outstanding Amount</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Profile Details" xml:space="preserve">
    <value>Profile Details</value>
  </data>
  <data name="Profile Picture" xml:space="preserve">
    <value>Profile Picture</value>
  </data>
  <data name="Quotation" xml:space="preserve">
    <value>Quotation</value>
  </data>
  <data name="Quotation Report" xml:space="preserve">
    <value>Quotation Report</value>
  </data>
  <data name="Sales" xml:space="preserve">
    <value>Sales</value>
  </data>
  <data name="Sales Report" xml:space="preserve">
    <value>Sales Report</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="Summary Details" xml:space="preserve">
    <value>Summary Details</value>
  </data>
  <data name="Total Credit Limit" xml:space="preserve">
    <value>Total Credit Limit</value>
  </data>
  <data name="Total Invoice" xml:space="preserve">
    <value>Total Invoice</value>
  </data>
  <data name="Total Invoice AMT" xml:space="preserve">
    <value>Total Invoice AMT</value>
  </data>
  <data name="Total Paid" xml:space="preserve">
    <value>Total Paid</value>
  </data>
  <data name="Transaction" xml:space="preserve">
    <value>Transaction</value>
  </data>
  <data name="Transaction Report" xml:space="preserve">
    <value>Transaction Report</value>
  </data>
  <data name="Update Credit" xml:space="preserve">
    <value>Update Credit</value>
  </data>
  <data name="Update Profile" xml:space="preserve">
    <value>Update Profile</value>
  </data>
</root>